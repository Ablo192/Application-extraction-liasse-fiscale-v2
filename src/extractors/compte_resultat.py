"""
Extracteur pour le Compte de R√©sultat (Formulaire 2052).

Ce module g√®re l'extraction des donn√©es du compte de r√©sultat depuis les PDFs
de liasses fiscales. Le compte de r√©sultat s'√©tend sur 2 pages.
"""

from src.extractors.base import BaseExtractor
from src.config.codes_fiscaux import CODES_COMPTE_RESULTAT, SEUIL_REUSSITE_CODES_COMPTE_RESULTAT
from src.config.mots_cles import MOTS_CLES_COMPTE_RESULTAT
from src.utils.pdf_utils import obtenir_colonne_numerique, detecter_colonnes_numeriques
from src.utils.text_processing import nettoyer_montant


class CompteResultatExtractor(BaseExtractor):
    """Extracteur pour le Compte de R√©sultat (2 pages)."""

    def __init__(self):
        super().__init__(
            codes_dict=CODES_COMPTE_RESULTAT,
            mots_cles_dict=MOTS_CLES_COMPTE_RESULTAT,
            seuil_reussite=SEUIL_REUSSITE_CODES_COMPTE_RESULTAT
        )

    def extraire_par_codes(self, pdf, table=None):
        """Extrait le Compte de R√©sultat en cherchant les CODES dans les tableaux des DEUX pages.

        Le Compte de R√©sultat est sur 2 pages :
        - PAGE 1 (page 3 du PDF) : Codes FA √† GW
        - PAGE 2 (page 4 du PDF) : Codes HA √† HN + HP, HQ, A1

        Args:
            pdf: Objet PDF ouvert avec pdfplumber
            table: Non utilis√© (extraction depuis le PDF directement)

        Returns:
            tuple: (liste de tuples (libell√©, montant), nombre de valeurs trouv√©es)
        """
        print("   ‚Üí Tentative d'extraction par CODES (2 pages)...")

        codes_trouves = {}

        # ========================================
        # √âTAPE 1 : TRAITER LA PAGE 1
        # ========================================
        print("\n   üìÑ Traitement de la PAGE 1 du Compte de R√©sultat...")
        cr_page1_index = self._trouver_page_compte_resultat_1(pdf)

        if cr_page1_index != -1:
            tables_page1 = pdf.pages[cr_page1_index].extract_tables()
            if tables_page1:
                table_page1 = tables_page1[0]
                idx_montant_page1 = self._trouver_colonne_page1(table_page1)

                if idx_montant_page1 is not None:
                    codes_page1, _ = self._extraire_codes_du_tableau(table_page1, idx_montant_page1)
                    codes_trouves.update(codes_page1)

        # ========================================
        # √âTAPE 2 : TRAITER LA PAGE 2
        # ========================================
        print("\n   üìÑ Traitement de la PAGE 2 du Compte de R√©sultat...")
        cr_page2_index = self._trouver_page_compte_resultat_2(pdf)

        if cr_page2_index != -1:
            tables_page2 = pdf.pages[cr_page2_index].extract_tables()
            if tables_page2:
                table_page2 = tables_page2[0]
                idx_montant_page2 = self._trouver_colonne_page2(table_page2)

                if idx_montant_page2 is not None:
                    codes_page2, _ = self._extraire_codes_du_tableau(table_page2, idx_montant_page2)
                    codes_trouves.update(codes_page2)

        nb_trouves = len([v for v in codes_trouves.values() if v != 0.0])
        print(f"\n   ‚ÑπÔ∏è Codes d√©tect√©s : {len(codes_trouves)} | Valeurs non-nulles : {nb_trouves}")

        resultats = self._convertir_en_resultats(codes_trouves)
        return resultats, nb_trouves

    def extraire_par_libelles(self, pdf, table=None):
        """Extrait le Compte de R√©sultat en cherchant les LIBELL√âS (m√©thode de secours).

        Note: Cette m√©thode est complexe √† impl√©menter sur 2 pages.
        Pour simplifier, on retourne les donn√©es extraites par codes m√™me si partielles.

        Args:
            pdf: Objet PDF ouvert avec pdfplumber
            table: Non utilis√©

        Returns:
            list: Liste de tuples (libell√©, montant)
        """
        print("   ‚Üí Extraction par libell√©s non impl√©ment√©e pour le Compte de R√©sultat")
        print("   ‚Üí Utilisation des donn√©es partielles extraites par codes")

        # Retourner une liste vide avec tous les libell√©s
        return [(self.codes_dict[code], 0) for code in self.codes_dict.keys()]

    def _trouver_page_compte_resultat_1(self, pdf):
        """Trouve la page 1 du Compte de R√©sultat (Produits et Charges d'exploitation)."""
        for i, page in enumerate(pdf.pages):
            text = page.extract_text()
            if text and ("Ventes de marchandises" in text or "Ventes" in text):
                print(f"   ‚úì Page 1 identifi√©e : page {i + 1} du PDF")
                return i
        return -1

    def _trouver_page_compte_resultat_2(self, pdf):
        """Trouve la page 2 du Compte de R√©sultat (Produits et Charges exceptionnels)."""
        for i, page in enumerate(pdf.pages):
            text = page.extract_text()
            if text and ("Produits exceptionnels" in text or "PRODUITS EXCEPTIONNELS" in text):
                print(f"   ‚úì Page 2 identifi√©e : page {i + 1} du PDF")
                return i
        return -1

    def _trouver_colonne_page1(self, table):
        """Trouve l'index de la colonne avec les montants dans la PAGE 1.

        Logique intelligente : Compte les colonnes num√©riques et prend la 1√®re.
        """
        # D√©tecter toutes les colonnes num√©riques
        colonnes_num = detecter_colonnes_numeriques(table, start_row=1, max_rows=20)
        print(f"   üîç [PAGE 1] Colonnes num√©riques d√©tect√©es : {colonnes_num}")

        # Prendre la 1√®re colonne num√©rique
        idx_montants = obtenir_colonne_numerique(table, position=1, start_row=1, max_rows=20)

        if idx_montants is not None:
            print(f"   ‚úì [PAGE 1] Colonne des montants (1√®re colonne num√©rique) : index {idx_montants}")
        else:
            print("   ‚ö†Ô∏è [PAGE 1] Impossible de trouver la 1√®re colonne num√©rique")

        return idx_montants

    def _trouver_colonne_page2(self, table):
        """Trouve l'index de la colonne avec les montants dans la PAGE 2.

        Logique intelligente : Compte les colonnes num√©riques et prend la 1√®re.
        """
        # D√©tecter toutes les colonnes num√©riques
        colonnes_num = detecter_colonnes_numeriques(table, start_row=1, max_rows=20)
        print(f"   üîç [PAGE 2] Colonnes num√©riques d√©tect√©es : {colonnes_num}")

        # Prendre la 1√®re colonne num√©rique
        idx_montants = obtenir_colonne_numerique(table, position=1, start_row=1, max_rows=20)

        if idx_montants is not None:
            print(f"   ‚úì [PAGE 2] Colonne des montants (1√®re colonne num√©rique) : index {idx_montants}")
        else:
            print("   ‚ö†Ô∏è [PAGE 2] Impossible de trouver la 1√®re colonne num√©rique")

        return idx_montants
