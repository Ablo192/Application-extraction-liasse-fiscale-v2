#!/usr/bin/env python3
"""
Application d'extraction de liasses fiscales fran√ßaises depuis des PDFs.

Ce script extrait les donn√©es comptables des formulaires fiscaux fran√ßais
(2050, 2051, 2052, 2057, 2058) et g√©n√®re un fichier Excel consolid√© avec analyse financi√®re.

Usage:
    python main_refactored.py

Le script traite tous les PDFs du dossier 'liasses/' et g√©n√®re un fichier Excel
dans le dossier 'resultats/'.
"""

import pdfplumber
from pathlib import Path

# Importation des modules refactoris√©s
from src.extractors.bilan_actif import BilanActifExtractor
from src.extractors.bilan_passif import BilanPassifExtractor
from src.extractors.compte_resultat import CompteResultatExtractor
from src.extractors.etat_echeances import EtatEcheancesExtractor
from src.extractors.affectation import AffectationExtractor
from src.export.excel_generator import creer_fichier_excel
from src.utils.pdf_utils import extraire_annee_fiscale, trouver_page_contenant


def extraire_un_pdf(chemin_pdf):
    """Extrait les donn√©es d'un seul PDF.

    Args:
        chemin_pdf: Path du fichier PDF √† traiter

    Returns:
        dict: {'actif': [...], 'passif': [...], 'cr': [...], 'echeances': [...], 'affectation': [...]}
              ou None en cas d'erreur
    """
    print(f"\n{'='*80}")
    print(f"üìÑ Traitement : {chemin_pdf.name}")
    print(f"{'='*80}\n")

    try:
        with pdfplumber.open(chemin_pdf) as pdf:

            # Extraire l'ann√©e fiscale
            annee = extraire_annee_fiscale(pdf)
            if annee:
                print(f"üìÖ Ann√©e fiscale d√©tect√©e : {annee}\n")

            # --- √âTAPE 1 : TROUVER LA PAGE DE L'ACTIF ---
            print("üîç Recherche de la page du Bilan Actif...")
            actif_page_index = trouver_page_contenant(pdf, ["Brut", "Net", "ACTIF"])

            if actif_page_index == -1:
                print("‚ùå Impossible de trouver la page du Bilan Actif.")
                return None

            print(f"   ‚úì Bilan Actif identifi√© sur la page {actif_page_index + 1}.")

            # --- √âTAPE 2 : TROUVER LA PAGE DU PASSIF ---
            print("üîç Recherche de la page du Bilan Passif...")
            passif_page_index = trouver_page_contenant(pdf, ["Capital social ou individuel", "PASSIF"])

            if passif_page_index == -1:
                print("‚ùå Impossible de trouver la page du Bilan Passif.")
                return None

            print(f"   ‚úì Bilan Passif identifi√© sur la page {passif_page_index + 1}.")

            # --- √âTAPE 3 : EXTRAIRE LES TABLEAUX ---
            print("\nüìä Extraction des tableaux...")

            tables_actif = pdf.pages[actif_page_index].extract_tables()
            if not tables_actif:
                print(f"‚ùå Aucun tableau trouv√© sur la page de l'Actif.")
                return None
            table_actif = tables_actif[0]
            print(f"   ‚úì Tableau Actif extrait.")

            tables_passif = pdf.pages[passif_page_index].extract_tables()
            if not tables_passif:
                print(f"‚ùå Aucun tableau trouv√© sur la page du Passif.")
                return None
            table_passif = tables_passif[0]
            print(f"   ‚úì Tableau Passif extrait.")

            # --- √âTAPE 4 : EXTRACTION DES DONN√âES AVEC LES EXTRACTEURS ---

            # Extraction Actif
            print("\n--- üöÄ EXTRACTION DU BILAN ACTIF ---")
            actif_extractor = BilanActifExtractor()
            donnees_actif = actif_extractor.extraire(pdf, table_actif)

            # Extraction Passif
            print("\n--- üöÄ EXTRACTION DU BILAN PASSIF ---")
            passif_extractor = BilanPassifExtractor()
            donnees_passif = passif_extractor.extraire(pdf, table_passif)

            # Extraction Compte de R√©sultat
            print("\n--- üöÄ EXTRACTION DU COMPTE DE R√âSULTAT ---")
            cr_extractor = CompteResultatExtractor()
            donnees_cr = cr_extractor.extraire(pdf, None)

            # Extraction √âtat des √©ch√©ances
            print("\n--- üöÄ EXTRACTION DE L'√âTAT DES √âCH√âANCES ---")
            echeances_page_index = trouver_page_contenant(pdf, ["√âTAT DES √âCH√âANCES", "ETAT DES ECHEANCES"])
            if echeances_page_index != -1:
                tables_echeances = pdf.pages[echeances_page_index].extract_tables()
                table_echeances = tables_echeances[0] if tables_echeances else []
                echeances_extractor = EtatEcheancesExtractor()
                donnees_echeances = echeances_extractor.extraire(pdf, table_echeances)
            else:
                print("‚ö†Ô∏è Page √âtat des √©ch√©ances non trouv√©e")
                donnees_echeances = []

            # Extraction Affectation du r√©sultat
            print("\n--- üöÄ EXTRACTION DE L'AFFECTATION DU R√âSULTAT ---")
            affectation_page_index = trouver_page_contenant(pdf, ["AFFECTATION DU R√âSULTAT", "RENSEIGNEMENTS DIVERS"])
            if affectation_page_index != -1:
                tables_affectation = pdf.pages[affectation_page_index].extract_tables()
                table_affectation = tables_affectation[0] if tables_affectation else []
                affectation_extractor = AffectationExtractor()
                donnees_affectation = affectation_extractor.extraire(pdf, table_affectation)
            else:
                print("‚ö†Ô∏è Page Affectation du r√©sultat non trouv√©e")
                donnees_affectation = []

            return {
                'actif': donnees_actif,
                'passif': donnees_passif,
                'cr': donnees_cr,
                'echeances': donnees_echeances,
                'affectation': donnees_affectation
            }

    except Exception as e:
        print(f"‚ùå Erreur lors du traitement : {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """Point d'entr√©e principal : traite tous les PDFs du dossier 'liasses/'."""
    print("\n" + "="*80)
    print("üöÄ EXTRACTION LIASSE FISCALE - MODE CLI (VERSION REFACTORIS√âE)")
    print("="*80)

    dossier_liasses = Path("liasses")
    dossier_resultats = Path("resultats")
    dossier_resultats.mkdir(exist_ok=True)

    fichiers_pdf = list(dossier_liasses.glob("*.pdf"))

    if not fichiers_pdf:
        print("\n‚ùå Aucun PDF dans 'liasses/'\n")
        return

    print(f"\nüìÅ {len(fichiers_pdf)} fichier(s) PDF trouv√©(s)")
    print("‚ÑπÔ∏è  Chaque PDF sera trait√© avec d√©tection automatique de l'ann√©e")
    print()

    donnees_par_annee = {}

    # Traiter chaque PDF
    for idx, chemin_pdf in enumerate(fichiers_pdf):
        print(f"\n{'='*80}")
        print(f"üìÑ Fichier {idx + 1}/{len(fichiers_pdf)} : {chemin_pdf.name}")
        print(f"{'='*80}")

        resultats = extraire_un_pdf(chemin_pdf)

        if resultats:
            # Essayer d'extraire l'ann√©e du PDF
            with pdfplumber.open(chemin_pdf) as pdf:
                annee = extraire_annee_fiscale(pdf)

            # Si l'ann√©e n'est pas d√©tect√©e, utiliser une attribution automatique
            if not annee:
                annee = str(2023 + idx)
                print(f"\n‚ö†Ô∏è Ann√©e non d√©tect√©e, utilisation de l'ann√©e par d√©faut : {annee}")

            donnees_par_annee[annee] = resultats
            print(f"\n‚úÖ Extraction r√©ussie pour {chemin_pdf.name} (ann√©e {annee})")
        else:
            print(f"\n‚ùå √âchec de l'extraction pour {chemin_pdf.name}")

    # G√©n√©rer le fichier Excel
    if donnees_par_annee:
        print(f"\n{'='*80}")
        print("üìä G√âN√âRATION DU FICHIER EXCEL")
        print(f"{'='*80}\n")

        nom_excel = dossier_resultats / "extraction_multi_annees.xlsx"
        creer_fichier_excel(donnees_par_annee, nom_excel)

        print("="*80)
        print("‚úÖ EXTRACTION TERMIN√âE")
        print("="*80)
        print(f"\nüì• Fichier g√©n√©r√© : {nom_excel}")
        print(f"üìÖ Ann√©es extraites : {', '.join(sorted(donnees_par_annee.keys()))}")
        print()
    else:
        print("\n‚ùå Aucune donn√©e n'a pu √™tre extraite.\n")


if __name__ == "__main__":
    main()
